sqrt(nrow(iris.example))
iris.imputed12NN = kNN(iris.example, k = 12)
#Assessing the results by comparing to the truth known by the original dataset.
table(iris$Species, iris.imputed12NN$Species)
##################################################
#####Using Minkowski Distance Measures in KNN#####
##################################################
library(kknn) #Load the weighted knn library.
#Separating the complete and missing observations for use in the kknn() function.
complete = iris.example[-missing.vector, ]
missing = iris.example[missing.vector, -3]
complete
missing
#Distance corresponds to the Minkowski power.
iris.euclidean = kknn(Species ~ ., complete, missing, k = 12, distance = 2)
summary(iris.euclidean)
iris.manhattan = kknn(Species ~ ., complete, missing, k = 12, distance = 1)
summary(iris.manhattan)
# Your code here
# First Class
library(deldir)
library(Hmisc)
titanic3.copy.KNN.impute = kNN(titanic3.copy.KNN, k = 1)
names(titanic3.copy.KNN)
names(titanic3.copy.KNN.impute)
table(titanic3.copy.KNN$pclass, titanic3.copy.KNN.impute$pclass)
titanic3.copy.KNN.impute[1310:1311, ]
# Your code here
#For 50 year old passenger class didn't change because $400 is significantly far than fare prices for class 2nd and 3rd. However, for 10 year old passenger class changed since $100 close enough for fare prices for 2nd and 3rd classes, and among of 36 closest classes 3rd class was majority.
sqrt(1311)
titanic3.copy.KNN.impute = kNN(titanic3.copy.KNN, k = 36)
table(titanic3.copy.KNN$pclass, titanic3.copy.KNN.impute$pclass)
titanic3.copy.KNN.impute[1310:1311, ]
# Your code here
names(titanic3)
titanic3.new = titanic3[, c("pclass", "survived", "sex", "age", "sibsp", "parch", "fare")]
titanic3.new$fare[1226]
set.seed(0)
titanic3.new$fare = impute(titanic3.new$fare, "random")
titanic3.new$fare[1226]
# Your code here
titanic3.new.complete = titanic3.new[!is.na(titanic3.new$age), ]
titanic3.new.missing = titanic3.new[is.na(titanic3.new$age), ]
dim(titanic3.new.complete)
dim(titanic3.new.missing)
# Your code here
library(kknn)
titanic3.new.manhattan = kknn(age ~ ., titanic3.new.complete, titanic3.new.missing, k = 1, distance = 1)
summary(titanic3.new.manhattan)
titanic3.new.euclidean = kknn(age ~ ., titanic3.new.complete, titanic3.new.missing, k = 1, distance = 2)
summary(titanic3.new.euclidean)
titanic3.new.Minkowski = kknn(age ~ ., titanic3.new.complete, titanic3.new.missing, k = 1, distance = 10)
summary(titanic3.new.Minkowski)
# Your code here
titanic3.new.manhattan
# Your code here
titanic3.new.manhattan$fitted.values
# Your code here
plot(titanic3.new.manhattan$fitted.values)
# Your code here
plot(titanic3.new.manhattan$fitted.values, titanic3.new.euclidea, titanic3.new.Minkowski)
# Your code here
plot(titanic3.new.manhattan$fitted.values, titanic3.new.euclidean, titanic3.new.Minkowski)
# Your code here
plot(titanic3.new.manhattan$fitted.values, titanic3.new.euclidean)
# Your code here
plot(titanic3.new.manhattan$fitted.values, titanic3.new.euclidean$fitted.values)
# Your code here
plot(titanic3.new.manhattan$fitted.values, titanic3.new.euclidean$fitted.values, titanic3.new.Minkowski)
# Your code here
plot(titanic3.new.manhattan$fitted.values, titanic3.new$fare)
length(titanic3.new.manhattan$fitted.values)
length(titanic3.copy$age)
length(titanic3.new.manhattan$fitted.values)
length(titanic3.new.euclidean$fitted.values)
length(titanic3.new.Minkowski$fitted.values)
hist(titanic3.new.manhattan$fitted.values)
hist(titanic3.new.euclidean$fitted.values)
hist(titanic3.new.Minkowski$fitted.values)
titanic3.new.Minkowski = kknn(age ~ ., titanic3.new.complete, titanic3.new.missing, k = 1, distance = 10)
summary(titanic3.new.Minkowski)
plot(titanic3.new.manhattan$fitted.value, titanic3.new.euclidean$fitted.values, titanic3.new.Minkowski$fitted.values)
plot(density(titanic3.new.manhattan$fitted.value), density(titanic3.new.euclidean$fitted.values), density(titanic3.new.Minkowski$fitted.values))
plot(density(titanic3.new.manhattan$fitted.value), density(titanic3.new.euclidean$fitted.values), density(titanic3.new.Minkowski$fitted.values))
plot(density(titanic3.new.manhattan$fitted.values), density(titanic3.new.euclidean$fitted.values), density(titanic3.new.Minkowski$fitted.values))
plot(density(titanic3.new.manhattan$fitted.values), density(titanic3.new.euclidean$fitted.values), density(titanic3.new.Minkowski$fitted.values))
plot(density(titanic3.new.manhattan$fitted.values), density(titanic3.new.euclidean$fitted.values))
hist(titanic3.new.manhattan$response)
hist(titanic3.new.manhattan$call)
hist(titanic3.new.manhattan$terms)
length(titanic3.new.manhattan$terms)
length(titanic3.new.euclidean$fitted.values)
length(titanic3.new.Minkowski$fitted.values)
length(titanic3.copy$age)
length(titanic3.new.manhattan$fitted.values)
length(titanic3.new.euclidean$fitted.values)
length(titanic3.new.Minkowski$fitted.values)
length(titanic3.copy$age
typeof(titanic3.new[!is.na(titanic3.new$age), ])
typeof(titanic3.new[!is.na(titanic3.new$age), ])
head(titanic3.new[!is.na(titanic3.new$age), ])
length(titanic3.new[!is.na(titanic3.new$age), ]$age)
length(titanic3.new[is.na(titanic3.new$age), ]$age)
# Your code here
library(kknn)
titanic3.new.manhattan = kknn(age ~ ., titanic3.new.complete, titanic3.new.missing, k = 1, distance = 1)
summary(titanic3.new.manhattan)
titanic3.new.euclidean = kknn(age ~ ., titanic3.new.complete, titanic3.new.missing, k = 1, distance = 2)
summary(titanic3.new.euclidean)
titanic3.new.Minkowski = kknn(age ~ ., titanic3.new.complete, titanic3.new.missing, k = 1, distance = 10)
summary(titanic3.new.Minkowski)
manhattan = titanic3.new # [!is.na(titanic3.new$age), ]
euclidean = titanic3.new
Minkowski = titanic3.new
manhattan$age[is.na(titanic3.new$age)] = titanic3.new.manhattan$fitted.values
euclidean$age[is.na(titanic3.new$age)] = titanic3.new.euclidean$fitted.values
Minkowski$age[is.na(titanic3.new$age)] = titanic3.new.Minkowski$fitted.values
which(is.na(manhattan$age))
which(is.na(euclidean$age))
which(is.na(Minkowski$age))
length(manhattan$age)
length(euclidean$age)
length(Minkowski$age)
length(titanic3.copy$age)
plot(density(titanic3.copy$age))
lines(density(manhattan$age))
plot(density(titanic3.copy$age))
lines(density(manhattan$age))
plot(density(titanic3.copy$age))
lines(density(manhattan$age), col="red")
plot(density(titanic3.copy$age))
lines(density(manhattan$age), col="red")
lines(density(euclidean$age), col="blue")
lines(density(Minkowski$age), col="green")
# Your code here
titanic3.new.manhattan36 = kknn(age ~ ., titanic3.new.complete, titanic3.new.missing, k = 36, distance = 1)
summary(titanic3.new.manhattan)
titanic3.new.euclidean36 = kknn(age ~ ., titanic3.new.complete, titanic3.new.missing, k = 36, distance = 2)
summary(titanic3.new.euclidean)
titanic3.new.Minkowski36 = kknn(age ~ ., titanic3.new.complete, titanic3.new.missing, k = 36, distance = 10)
summary(titanic3.new.Minkowski)
# Your code here
titanic3.new.manhattan36 = kknn(age ~ ., titanic3.new.complete, titanic3.new.missing, k = 36, distance = 1)
summary(titanic3.new.manhattan)
titanic3.new.euclidean36 = kknn(age ~ ., titanic3.new.complete, titanic3.new.missing, k = 36, distance = 2)
summary(titanic3.new.euclidean)
titanic3.new.Minkowski36 = kknn(age ~ ., titanic3.new.complete, titanic3.new.missing, k = 36, distance = 10)
summary(titanic3.new.Minkowski)
# Your code here
titanic3.new.manhattan36 = kknn(age ~ ., titanic3.new.complete, titanic3.new.missing, k = 36, distance = 1)
# Your code here
titanic3.new.manhattan36 = kknn(age ~ ., titanic3.new.complete, titanic3.new.missing, k = 36, distance = 1)
summary(titanic3.new.manhattan36)
titanic3.new.euclidean36 = kknn(age ~ ., titanic3.new.complete, titanic3.new.missing, k = 36, distance = 2)
summary(titanic3.new.euclidean36)
titanic3.new.Minkowski36 = kknn(age ~ ., titanic3.new.complete, titanic3.new.missing, k = 36, distance = 10)
summary(titanic3.new.Minkowski36)
# Your code here
manhattan = titanic3.new
euclidean = titanic3.new
Minkowski = titanic3.new
manhattan$age[is.na(manhattan$age)] = titanic3.new.manhattan$fitted.values
euclidean$age[is.na(euclidean$age)] = titanic3.new.euclidean$fitted.values
Minkowski$age[is.na(Minkowski$age)] = titanic3.new.Minkowski$fitted.values
which(is.na(manhattan$age))
which(is.na(euclidean$age))
which(is.na(Minkowski$age))
length(manhattan$age)
length(euclidean$age)
length(Minkowski$age)
length(titanic3.copy$age)
plot(density(titanic3.copy$age))
lines(density(manhattan$age), col="red")
lines(density(euclidean$age), col="blue")
lines(density(Minkowski$age), col="green")
# Your code here
manhattan36 = titanic3.new
euclidean36 = titanic3.new
Minkowski36 = titanic3.new
manhattan36$age[is.na(manhattan36$age)] = titanic3.new.manhattan36$fitted.values
euclidean36$age[is.na(euclidean36$age)] = titanic3.new.euclidean36$fitted.values
Minkowski36$age[is.na(Minkowski36$age)] = titanic3.new.Minkowski36$fitted.values
which(is.na(manhattan36$age))
which(is.na(euclidean36$age))
which(is.na(Minkowski36$age))
length(manhattan36$age)
length(euclidean36$age)
length(Minkowski36$age)
length(titanic3.copy$age)
plot(density(titanic3.copy$age))
lines(density(manhattan36$age), col="red")
lines(density(euclidean36$age), col="blue")
lines(density(Minkowski36$age), col="green")
lines(density(Minkowski36$age), col="green")
# Your code here
manhattan36 = titanic3.new
euclidean36 = titanic3.new
Minkowski36 = titanic3.new
manhattan36$age[is.na(manhattan36$age)] = titanic3.new.manhattan36$fitted.values
euclidean36$age[is.na(euclidean36$age)] = titanic3.new.euclidean36$fitted.values
Minkowski36$age[is.na(Minkowski36$age)] = titanic3.new.Minkowski36$fitted.values
which(is.na(manhattan36$age))
which(is.na(euclidean36$age))
which(is.na(Minkowski36$age))
length(manhattan36$age)
length(euclidean36$age)
length(Minkowski36$age)
length(titanic3.copy$age)
plot(density(titanic3.copy$age))
lines(density(manhattan36$age), col="red")
lines(density(euclidean36$age), col="blue")
lines(density(Minkowski36$age), col="green")
setwd("C:/Users/19178/Desktop/NYCDSA/Course/G Goginashvili Project 2")
library(tidyr)
coldsteel <- read.csv('coldsteel.csv')
head(coldsteel)
coldsteel
names(coldsteel)
coldsteel$blade_length
coldsteel$blade_length <-
as.numeric(gsub("[^\\d]+", "", coldsteel$blade_length, perl = TRUE))
coldsteel$handle_length
coldsteel$handle_length <-
as.numeric(gsub("[^\\d]+", "", coldsteel$handle_length, perl = TRUE))
coldsteel$blade_steel
coldsteel$blade_steel <-
ifelse(
coldsteel$blade_steel == "Damascus",
1,
ifelse (coldsteel$blade_steel == "amascus", 1, 2)
)
coldsteel$blade_steel
coldsteel$overall_length <-
as.numeric(gsub("[^\\d]+", "", coldsteel$overall_length, perl = TRUE))
coldsteel$overall_length
typeof(coldsteel$price)
coldsteel$weigh <-
as.numeric(gsub("[^\\d]+", "", coldsteel$weigh, perl = TRUE))
coldsteel$weigh
coldsteel_clean <- coldsteel[complete.cases(coldsteel),]
dim(coldsteel_clean)
typeof(coldsteel$overall_length)
coldsteel_clean$blade_length <- ifelse(
coldsteel_clean$blade_length < 100,
coldsteel_clean$blade_length,
as.integer(coldsteel_clean$blade_length / 100) + ifelse(
coldsteel_clean$blade_length %% 100 == 14,
0.25,
ifelse(
coldsteel_clean$blade_length %% 100 == 34,
0.75,
ifelse(
coldsteel_clean$blade_length %% 100 == 38,
0.375,
ifelse(coldsteel_clean$blade_length %% 100 == 12, 0.5, 0.875)
)
)
)
)
coldsteel_clean$blade_length
coldsteel_clean$handle_length <- ifelse(
coldsteel_clean$handle_length < 100,
coldsteel_clean$handle_length,
as.integer(coldsteel_clean$handle_length / 100) + ifelse(
coldsteel_clean$handle_length %% 100 == 14,
0.25,
ifelse(
coldsteel_clean$handle_length %% 100 == 34,
0.75,
ifelse(
coldsteel_clean$handle_length %% 100 == 38,
0.375,
ifelse(
coldsteel_clean$handle_length %% 100 == 12,
0.5,
ifelse(
coldsteel_clean$handle_length %% 100 == 58,
0.625,
ifelse(coldsteel_clean$handle_length %% 100 == 18, 0.125, 0.65)
)
)
)
)
)
)
coldsteel_clean$handle_length
coldsteel_clean$overall_length  <- ifelse(
coldsteel_clean$overall_length < 100,
coldsteel_clean$overall_length,
as.integer(coldsteel_clean$overall_length / 100) + ifelse(
coldsteel_clean$overall_length %% 100 == 14,
0.25,
ifelse(
coldsteel_clean$overall_length %% 100 == 34,
0.75,
ifelse(
coldsteel_clean$overall_length %% 100 == 38,
0.375,
ifelse(
coldsteel_clean$overall_length %% 100 == 12,
0.5,
ifelse(coldsteel_clean$overall_length %% 100 == 58,
0.625, 0.825)
)
)
)
)
)
coldsteel_clean$overall_length
head(coldsteel_clean)
coldsteel_clean$weigh[29] = 346
coldsteel_clean$weigh <-
ifelse(coldsteel_clean$weigh < 100,
coldsteel_clean$weigh,
coldsteel_clean$weigh / 10)
coldsteel_clean$weigh
coldsteel_clean$katana <- ifelse(coldsteel_clean$katana == 1, 1, 2)
coldsteel_clean$katana
coldsteel_clean$blade_steel <-
as.factor(coldsteel_clean$blade_steel)
coldsteel_clean$katana <- as.factor(coldsteel_clean$katana)
coldsteel_clean$blade_steel
coldsteel_clean$katana
typeof(coldsteel_clean$katana)
coldsteel_clean
valiantarmoury <- read.csv('valiantarmoury.csv')
head(valiantarmoury)
valiantarmoury$blade_length <-
as.numeric(gsub("[^\\d]+", "", valiantarmoury$blade_length, perl = TRUE))
valiantarmoury$blade_length
valiantarmoury$handle_length <-
as.numeric(gsub("[^\\d]+", "", valiantarmoury$handle_length, perl = TRUE))
valiantarmoury$handle_length
valiantarmoury$overall_length <-
as.numeric(gsub("[^\\d]+", "", valiantarmoury$overall_length, perl = TRUE))
valiantarmoury$overall_length
valiantarmoury$weigh <-
as.numeric(gsub("[^\\d]+", "", valiantarmoury$weigh, perl = TRUE))
valiantarmoury$weigh
valiantarmoury$name
valiantarmoury$name[8] <-
'VA-101-Craftsman Series - The Noble Medieval Sword'
valiantarmoury$name <- sub('.*- ', '', valiantarmoury$name)
valiantarmoury_clean <- valiantarmoury
valiantarmoury_clean$katana <- 2
valiantarmoury_clean$katana
coldsteel_clean$blade_steel
valiantarmoury_clean$blade_steel <- 3
head(valiantarmoury_clean)
valiantarmoury_clean$price <- valiantarmoury$price
sub('.*$', '', valiantarmoury_clean$price)
typeof(valiantarmoury_clean$price)
valiantarmoury_clean$price <-
as.numeric(gsub('[$,]', '', valiantarmoury_clean$price))
valiantarmoury_clean <-
valiantarmoury_clean[complete.cases(valiantarmoury_clean),]
valiantarmoury_clean$blade_length
valiantarmoury_clean$blade_length <- ifelse(
valiantarmoury_clean$blade_length < 100,
valiantarmoury_clean$blade_length,
as.integer(valiantarmoury_clean$blade_length / 100) + ifelse(
valiantarmoury_clean$blade_length %% 100 == 14,
0.25,
ifelse(
valiantarmoury_clean$blade_length %% 100 == 12,
0.5,
ifelse(valiantarmoury_clean$blade_length %% 100 == 34,
0.75, 0.875)
)
)
)
valiantarmoury_clean$blade_length
valiantarmoury_clean$handle_length
valiantarmoury_clean$handle_length <- ifelse(
valiantarmoury_clean$handle_length < 100,
valiantarmoury_clean$handle_length,
as.integer(valiantarmoury_clean$handle_length / 100) + ifelse(
valiantarmoury_clean$handle_length %% 100 == 14,
0.25,
ifelse(
valiantarmoury_clean$handle_length %% 100 == 12,
0.5,
ifelse(
valiantarmoury_clean$handle_length %% 100 == 34,
0.75,
ifelse(valiantarmoury_clean$handle_length %% 100 == 18,
0.125, 0.55)
)
)
)
)
valiantarmoury_clean$handle_length
valiantarmoury_clean$overall_length
valiantarmoury_clean$overall_length  <- ifelse(
valiantarmoury_clean$overall_length < 100,
valiantarmoury_clean$overall_length,
as.integer(valiantarmoury_clean$overall_length / 100) + ifelse(
valiantarmoury_clean$overall_length %% 100 == 12,
0.5,
ifelse(
valiantarmoury_clean$overall_length %% 100 == 38,
0.375,
ifelse(valiantarmoury_clean$overall_length %% 100 == 34,
0.75, 0.55)
)
)
)
valiantarmoury_clean$overall_length
valiantarmoury_clean$weigh
valiantarmoury_clean$weigh <-
ifelse(
valiantarmoury_clean$weigh < 100,
as.integer(valiantarmoury_clean$weigh / 10) + valiantarmoury_clean$weigh %% 10 / 10,
as.integer(valiantarmoury_clean$weigh / 100) + valiantarmoury_clean$weigh %% 100 / 100
)
valiantarmoury_clean$weigh
valiantarmoury_clean <-
valiantarmoury_clean[complete.cases(valiantarmoury_clean),]
valiantarmoury_clean
valiantarmoury_clean <- valiantarmoury_clean[valiantarmoury_clean$weigh < 100, ]
coldsteel_clean
coldsteel_clean$weigh = round(coldsteel_clean$weigh / 16, digits=2)
coldsteel_clean$weigh
valiantarmoury_clean
coldsteel_clean
valiantarmoury_clean
coldsteel_clean
cbind(coldsteel_clean, valiantarmoury_clean)
rbind(coldsteel_clean, valiantarmoury_clean)
coldsteel_clean$blade_steel <- as.numeric(coldsteel_clean$blade_steel)
rbind(coldsteel_clean, valiantarmoury_clean)
swords_clean <- rbind(coldsteel_clean, valiantarmoury_clean)
swords_clean
write.csv(swords_clean,"swords.csv", row.names = FALSE)
swords_new <- read.csv("swords.csv")
swords_new
swords_new
swords_new$blade_overall = swords_new$blade_length / swords_new$overall_length
swords_new
swords_new <- swords_new[swords_new$blade_overall < 1, ]
swords_new
write.csv(swords_new,"swords_new.csv", row.names = FALSE)
library(tidyverse)
names(swords_new)
ggplot(swords_new, aes(blade_steel, price)) + geom_boxplot()
ggplot(swords_new, aes(as.factor(blade_steel), price)) + geom_boxplot()
ggplot(swords_new, aes(as.factor(katana), price)) + geom_boxplot()
ggplot(swords_new, aes(blade_length, price)) + geom_point()
ggplot(swords_new, aes(blade_length, price)) + geom_point() + geom_smooth()
ggplot(swords_new, aes(blade_length, price)) + geom_point() + geom_smooth(method=lm)
ggplot(swords_new, aes(blade_overall, price)) + geom_point() + geom_smooth(method=lm)
ggplot(swords_new, aes(handle_length, price)) + geom_point() + geom_smooth(method=lm)
ggplot(swords_new, aes(overall_length, price)) + geom_point() + geom_smooth(method=lm)
ggplot(swords_new, aes(weigh, price)) + geom_point() + geom_smooth(method=lm)
library(PerformanceAnalytics)
install.packages("PerformanceAnalytics")
library(PerformanceAnalytics)
names(swords_new)
cor_variables <- swords_new[, c(1,6,7,9)]
chart.Correlation(cor_variables, histogram=TRUE, pch=19)
cor_variables <- swords_new[, c(6,1,7,9)]
chart.Correlation(cor_variables, histogram=TRUE, pch=19)
names(swords_new)
cor_variables <- swords_new[, c(6, 2, 1, 7, 8, 9)]
chart.Correlation(cor_variables, histogram=TRUE, pch=19)
cor_variables_num <- swords_new[, c(6, 1, 7, 9)]
cor_variables_all <- swords_new[, c(6, 2, 1, 7, 8, 9)]
chart.Correlation(cor_variables_num, histogram=TRUE, pch=19)
chart.Correlation(cor_variables_all, histogram=TRUE, pch=19)
ggplot(swords_new, aes(as.factor(overall_length), price)) + geom_point() + geom_smooth(method=lm)
ggplot(swords_new, aes(overall_length, price)) + geom_point() + geom_smooth(method=lm)
names(swords_new)
model_short <- lm(price ~ blade_length + weigh + blade_overall)
model_short <- lm(swords_new$price ~ swords_new$blade_length + swords_new$weigh + swords_new$blade_overall)
model_short
summary(model_short)
model_all <-
lm(
swords_new$price ~ swords_new$blade_length + swords_new$weigh + swords_new$blade_overall + swords_new$blade_steel + swords_new$katana)
model_all <-
lm(
swords_new$price ~ swords_new$blade_length + swords_new$weigh + swords_new$blade_overall + swords_new$blade_steel + swords_new$katana
)
summary(model_all)
summary(model_all)
ggplot(swords_new, aes(as.factor(blade_steel), price)) + geom_boxplot()
ggplot(swords_new, aes(as.factor(katana), price)) + geom_boxplot()
# Relationship between blade length and price
ggplot(swords_new, aes(blade_length, price)) + geom_point() + geom_smooth(method =
lm)
ggplot(swords_new, aes(blade_overall, price)) + geom_point() + geom_smooth(method =
lm)
ggplot(swords_new, aes(overall_length, price)) + geom_point() + geom_smooth(method =
lm)
# Relationship between handle length and price
ggplot(swords_new, aes(handle_length, price)) + geom_point() + geom_smooth(method =
lm)
# Relationship between weigh and price
ggplot(swords_new, aes(weigh, price)) + geom_point() + geom_smooth(method =
lm)
chart.Correlation(cor_variables_num, histogram = TRUE, pch = 19)
chart.Correlation(cor_variables_all, histogram = TRUE, pch = 19)
model_short <-
lm(
swords_new$price ~ swords_new$blade_length + swords_new$weigh + swords_new$blade_overall
)
summary(model_short)
model_all <-
lm(
swords_new$price ~ swords_new$blade_length + swords_new$weigh + swords_new$blade_overall + swords_new$blade_steel + swords_new$katana
)
summary(model_all)
